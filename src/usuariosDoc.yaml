openapi: 3.0.1

info:
  title: ecoMobility - Treecko API
  description: API documentation for ecoMobility release v1.0 Treecko.
  version: 1.0.0
  contact:
    name: Mail
    email: ecomobilityupc@gmail.com

servers:
  - url: http://localhost:3000/api/v1/
    description: API v1.0
tags:
  - name: Estaciones
    description: Endpoints para estaciones
/users:
    get:
      tags:
        - Usuarios
      summary: Obtener todas los usuarios
      description: Obtener todas las usuarios de la DB con todos sus atributos.
      operationId: getAllUsuarios
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users"
        204:
          description: "No content"
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/204"
    post:
      tags:
        - Users
      summary: Crear un nuevo usuario.
      description: Crear una nueva usuario en la DB con los atributos especificados.
      operationId: postUsuario
      parameters:
        - name: ADREÇA
          in: query
          description: Dirección donde se encuentra la nueva estación de carga.
          required: true
          explode: false
          schema:
            type: string
   
 

      responses:
        201:
          description: User  created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/400"

  /users/Email:
    get:
      tags:
        - Users
      summary: Obtener el Email de todas las usuaris
      description: Obtener los atributos email y ID de todos las usuarios de la DB.
      operationId: getDirAllUsers
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        204:
          description: "No content"
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/204"

  /users/email:
    get:
      tags:
        - Users
      summary: Obtener los enails  de todos las Users
      description: Obtener los atributos email de todos las usuariops de la DB.
      operationId: geEmailsAllusers
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoordEstacion"
        204:
          description: "No content"
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/204"

  /users/{ID}:
    get:
      tags:
        - Users
      summary: Obtener un usuario concreto
      description: Obtener todos los atributos de un usuario especificado en el path.
      operationId: getUsuario
      parameters:
        - name: ID
          in: path
          description: Identificador de el usuario que queremos consultar
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        204:
          description: "No content"
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/204"
        400:
          description: Bad request
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/400"
        404:
          description: Not found
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/404"
    put:
      tags:
        - Users
      summary: Actualizar una nuevo usuario.
      description: Actualiza el usuario definido en el path añadiendo los atributos especificados en el body.
      operationId: updateUser
      parameters:
        - name: ID
          in: path
          description: Identificador de el usuario que queremos actualizar
          required: true
          schema:
            type: string
          required: false
          explode: false
          schema:
            type: string
            enum:
              - mercaderies
              - cotxe
              - moto
              - moto i cotxe
              - taxi
        - name: TIPUS CONNEXIÓ
          in: query
          description: Tipo de carga de la que dispondrá la estación de carga actualizada.
          required: false
          explode: false
          schema:
            type: string


      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/examples/200Update"
        400:
          description: Bad request
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/400"
        404:
          description: Bad request
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/404"
    delete:
      tags:
        - Users
      summary: Eliminar un usuario concreta
      description: Eliminar la usuario especificado en el path.
      operationId: deleteUsuario
      parameters:
        - name: ID
          in: path
          description: Identificador de el usuario que queremos eliminar
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/examples/200Delete"
        404:
          description: Not found
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/404"

  /users/{ID}/nombre:
    get:
      tags:
        - User
      summary: Obtener el nombre de un usuario concreto
      description: Obtener el atributo nombre de el usaurio especificada en el path.
      operationId: getDirUsuario
      parameters:
        - name: ID
          in: path
          description: Identificador de el usuario  que queremos consultar
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        204:
          description: "No content"
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/204"
        400:
          description: Bad request
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/400"
        404:
          description: Not found
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/404"

  /users/{ID}/Ultima_conexion:
    get:
      tags:
        - Users
      summary: Obtener la ultima conexion de un usuario concreta
      description: Obtener los atributos ultima_conexion de el usuario especificado en el path
      operationId: getultima_conexion_usuario
      parameters:
        - name: ID
          in: path
          description: Identificador de la estación que queremos consultar
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UltimaConexion"
        204:
          description: "No content"
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/204"
        400:
          description: Bad request
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/400"
        404:
          description: Not found
          content:
            application/json:
              examples:
                example:
                  $ref: "#/components/examples/404"

components:
  schemas:
    User:
      type: object
      properties:
        ID:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        ADREÇA:
          type: string
          example: "Avinguda Meridiana, 66"
        CODIPROV:
          type: string
          example: "08"


components:
  schemas:
    Users:
      type: object
      properties:
        ID:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        Email:
          type: string
          example: "Avinguda Meridiana, 66"
        Contraseña:
          type: string
          example: "08"
        es_superusuario:
          type: bool
          example: "false"
        Fecha_registro:
          type: string
          example: "2.18729"
 
  examples:
    204:
      value:
        status: 204
        error: "No content"
        message: "No content"
    200Update:
      value:
        status: 200
        error: "Successful operation"
        message: "Successful update"
    200Delete:
      value:
        status: 200
        error: "Successful operation"
        message: "Successful delete"
    400:
      value:
        status: 400
        error: "Bad request"
        message: "Missing attributes"
    404:
      value:
        status: 404
        error: "Not found"
        message: "ID does not exist"