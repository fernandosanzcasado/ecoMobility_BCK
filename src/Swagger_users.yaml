openapi: 3.0.1

info:
  title: ecoMobility - Treecko API
  description: API documentation for ecoMobility release v1.0 Treecko.
  version: 1.0.0
  contact:
    name: Mail
    email: ecomobilityupc@gmail.com

servers:
  - url: http://localhost:3000/api/v1/
    description: API v1.0
tags:
  - name: Users
    description: Endpoints para users
/users:
  get:
    tags:
      - Usuarios
    summary: Obtener todas los usuarios
    description: Obtener todas las usuarios de la DB con todos sus atributos.
    operationId: getAllUsuarios
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Users"
      204:
        description: "No content"
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/204"
  post:
    tags:
      - Users
    summary: Crear un nuevo usuario.
    description: Crear una nueva usuario en la DB con los atributos especificados.
    operationId: postUsuario
    parameters:
      - name: name
        in: query
        description: nombre usuario.
        required: true
        explode: false
        schema:
          type: string
          post:
      - name: surnames
        in: query
        description: Apellidos usuario.
        required: true
        explode: false
        schema:
          type: string
      - name: is_superUser
        in: query
        description: El Usuario es superusuario.
        required: false
        explode: false
        schema:
          type: boolean
      - name: dateJoined
        in: query
        description: Longitud donde se encuentra la nueva estación de carga.
        required: true
        explode: false
        schema:
          type: string

    responses:
      201:
        description: User created
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Users"
      400:
        description: Bad request
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/400"

/users/Email:
  get:
    tags:
      - Users
    summary: Obtener el Email de todas las usuaris
    description: Obtener los atributos email y ID de todos las usuarios de la DB.
    operationId: getDirAllUsers
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Users"
      204:
        description: "No content"
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/204"
      400:
        description: Bad request
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/400"
      404:
        description: Not found
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/404"

  put:
    tags:
      - Users
    summary: Actualizar una nuevo usuario.
    description: Actualiza el usuario definido en el path añadiendo los atributos especificados en el body.
    operationId: updateUser
    parameters:
      - name: name
        in: query
        description: nombre usuario.
        required: true
        explode: false
        schema:
          type: string
          post:
      - name: surnames
        in: query
        description: Apellidos usuario.
        required: true
        explode: false
        schema:
          type: string
      - name: is_superUser
        in: query
        description: El Usuario es superusuario.
        required: false
        explode: false
        schema:
          type: boolean
      - name: dateJoined
        in: query
        description: Longitud donde se encuentra la nueva estación de carga.
        required: true
        explode: false
        schema:
          type: string

    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/examples/200Update"
      400:
        description: Bad request
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/400"
      404:
        description: Bad request
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/404"
  delete:
    tags:
      - Users
    summary: Eliminar un usuario concreta
    description: Eliminar la usuario especificado en el path.
    operationId: deleteUsuario
    parameters:
      - name: ID
        in: path
        description: Identificador de el usuario que queremos eliminar
        required: true
        schema:
          type: string
    responses:
      200:
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/examples/200Delete"
      404:
        description: Not found
        content:
          application/json:
            examples:
              example:
                $ref: "#/components/examples/404"

/users/login:
  post:
    tags:
      - Users
    summary: Loguear un usuario existente.
    description: Hace Login de un usuario ya existente con el Id como el email pasado como parametro y la contraseña pasada como parametro.
    operationId: LogintUsuario
    parameters:
      - name: Email
        in: query
        description: nombre usuario.
        required: true
        explode: false
        schema:
          type: string
          post:
      - name: password
        in: query
        description: Apellidos usuario.
        required: true
        explode: false
        schema:
          type: string

/users/register:
  post:
  tags:
    - Users
  summary: Crear un nuevo usuario.
  description: Crear una nueva usuario en la DB con los atributos especificados.
  operationId: postUsuario
  parameters:
    - name: name
      in: query
      description: nombre usuario.
      required: true
      explode: false
      schema:
        type: string
        post:
    - name: surnames
      in: query
      description: Apellidos usuario.
      required: true
      explode: false
      schema:
        type: string
    - name: is_superUser
      in: query
      description: El Usuario es superusuario.
      required: false
      explode: false
      schema:
        type: boolean
    - name: dateJoined
      in: query
      description: Longitud donde se encuentra la nueva estación de carga.
      required: true
      explode: false
      schema:
        type: string

components:
  schemas:
    Users:
      type: object
      properties:
        Email:
          type: string
          example: "gmarti@gmail.com"
        Contraseña:
          type: string
          example: "0sdddad8"
        Fecha_registro:
          type: string
          example: "21/08/2022"
        name:
          type: string
          example: "paco"
        apellidos:
          type: string
          example: "adda"
        is_superUser:
          type: boolean
          example: false

  examples:
    204:
      value:
        status: 204
        error: "No content"
        message: "No content"
    200Update:
      value:
        status: 200
        error: "Successful operation"
        message: "Successful update"
    200Delete:
      value:
        status: 200
        error: "Successful operation"
        message: "Successful delete"
    400:
      value:
        status: 400
        error: "Bad request"
        message: "Missing attributes"
    404:
      value:
        status: 404
        error: "Not found"
        message: "ID does not exist"
